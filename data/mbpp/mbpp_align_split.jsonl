{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nimport re\r\ndef change_date_format(dt)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\nfrom collections import defaultdict\r\ndef grouping_dictionary(l)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the length of the shortest word.\ndef len_log(list1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the product of itâ€™s kth index in the given tuples.\ndef get_product(val) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\nfrom itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove duplicates from a list of lists.\nimport itertools\r\ndef remove_duplicate(list1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to generate all sublists of a given list.\nfrom itertools import combinations\r\ndef sub_lists(my_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \r\n\t\t\tk, arr)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to accept the strings which contains all vowels.\ndef check(string)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to convert camel case string to snake case string by using regex.\nimport re\r\ndef camel_to_snake(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to solve tiling problem.\ndef get_noOfways(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to round up a number to specific digits.\nimport math\r\ndef round_up(a, digits)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to combine two dictionaries by adding values for common keys.\nfrom collections import Counter\r\ndef add_dict(d1,d2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to reverse words in a given string.\ndef reverse_words(s)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to convert an integer into a roman numeral.\ndef int_to_roman( num)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the occurrence and position of the substrings within a string.\nimport re\r\ndef occurance_substring(text,pattern)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\nimport heapq\r\ndef cheap_items(items,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"}]}
