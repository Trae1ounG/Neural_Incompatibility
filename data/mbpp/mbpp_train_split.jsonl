{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count unique keys for each value present in the tuple.\nfrom collections import defaultdict \r\ndef get_unique(test_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find three closest elements from three sorted arrays.\nimport sys \r\n\r\ndef find_closet(A, B, C, p, q, r)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to sort a list of lists by length and value.\ndef sort_sublists(list1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to get the last element of each sublist.\ndef Extract(lst)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef Extract(lst): \r\n    return [item[-1] for item in lst] "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nfrom itertools import groupby\r\ndef pack_consecutive_duplicates(list1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find area of a sector.\ndef sector_area(r,a)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to iterate over elements repeating each as many times as its count.\nfrom collections import Counter\r\ndef count_variable(a,b,c,d)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to list out the list of given strings individually using map function.\ndef listify_list(list1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the index of smallest triangular number with n digits.\nimport math \r\ndef find_Index(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\nimport heapq as hq\r\ndef raw_heap(rawheap)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove multiple spaces in a string by using regex.\nimport re\r\ndef remove_multiple_spaces(text1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\nfrom itertools import groupby \r\ndef group_element(test_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to caluclate arc length of an angle.\ndef arc_length(d,a)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check for a number at the end of a string.\nimport re\r\ndef end_num(string)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to convert a list of multiple integers into a single integer.\ndef convert(list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove the parenthesis area in a string.\nimport re\r\ndef remove_parenthesis(items)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find sum of all prime divisors of a given number.\ndef Sum(N)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to copy a list from a singleton tuple.\ndef lcopy(xs)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef lcopy(xs):\n  return xs[:]\n"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to sort the given array by using heap sort.\ndef heap_sort(arr)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to print the first n lucky numbers.\ndef lucky_num(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether the count of divisors is even or odd.\nimport math \r\ndef count_Divisors(n) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\nfrom itertools import groupby \r\ndef extract_elements(numbers, n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find length of the subarray having maximum sum.\nfrom sys import maxsize \r\ndef max_sub_array_sum(a,size)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to extract year, month and date from a url by using regex.\nimport re\r\ndef extract_date(url)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to get the length of a complex number.\nimport cmath\r\ndef len_complex(a,b)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to get the position of rightmost set bit.\nimport math\r\ndef get_First_Set_Bit_Pos(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the longest chain which can be formed from the given set of pairs.\nclass Pair(object)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nclass Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\nimport re\r\ndef text_match(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count coin change.\ndef coin_change(S, m, n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to count numeric values in a given string.\ndef number_ctr(str)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\nimport heapq as hq\r\ndef heap_sort(iterable)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to zip two given lists of lists.\ndef zip_list(list1,list2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef max_sum_list(lists):\r\n return max(lists, key=sum)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite function to find the sum of all items in the given dictionary.\ndef return_sum(dict)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count occurrence of a character in a string.\ndef count_char(string,char)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count the same pair in two given lists using map function.\nfrom operator import eq\r\ndef count_same_pair(nums1, nums2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether the length of the word is even or not.\ndef word_len(s)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find minimum of two numbers.\ndef min_of_two( x, y )"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to convert degrees to radians.\nimport math\r\ndef radian_degree(degree)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function that matches a string that has an a followed by zero or more b's.\nimport re\r\ndef text_match(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to access dictionary key’s element by index.\ndef access_key(ditionary,key)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef access_key(ditionary,key):\r\n  return list(ditionary)[key]"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check a decimal with a precision of 2.\ndef is_decimal(num)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the area of a rombus.\ndef rombus_area(p,q)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the second smallest number in a list.\ndef second_smallest(numbers)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the combinations of sums with tuples in the given tuple list.\nfrom itertools import combinations \r\ndef find_combinations(test_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\nfrom collections import Counter \r\ndef anagram_lambda(texts,str)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to convert the given tuples into set.\ndef tuple_to_set(t)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nimport re\r\ndef replace_specialchar(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the average of a list.\ndef Average(lst)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef Average(lst): \r\n    return sum(lst) / len(lst) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to calculate wind chill index.\nimport math\r\ndef wind_chill(v,t)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove duplicate words from a given string using collections module.\nfrom collections import OrderedDict\r\ndef remove_duplicate(string)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find out, if the given number is abundant.\ndef is_abundant(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to convert a string to a list.\ndef Convert(string)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\nimport re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find ln, m lobb number.\ndef binomial_coeff(n, k)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\nimport re\r\ndef remove_extra_char(text1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to get an item of a tuple.\ndef get_item(tup1,index)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find maximum of two numbers.\ndef max_of_two( x, y )"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to convert the given string to upper case.\ndef is_upper(string)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef is_upper(string):\r\n  return (string.upper())"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove all whitespaces from a string.\nimport re\r\ndef remove_all_spaces(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\nimport heapq\r\ndef nth_super_ugly_number(n, primes)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to get dictionary keys as a list.\ndef get_key(dict)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’.\ndef get_Pairs_Count(arr,n,sum)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to remove spaces from a given string.\ndef remove_spaces(str1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to validate a gregorian date.\nimport datetime\r\ndef check_date(m, d, y)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\nfrom collections import Counter \r\n\t\r\ndef second_frequent(input)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find lcm of two positive integers.\ndef lcm(x, y)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the average of even numbers till a given even number.\ndef average_Even(n) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if the given tuple has any none value or not.\ndef check_none(test_tup)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the perimeter of a rombus.\ndef rombus_perimeter(a)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to extract the maximum numeric value from a string by using regex.\nimport re \r\ndef extract_max(input)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find minimum k records from tuple list.\ndef min_k(test_list, K)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to move all the numbers in it to the given string.\ndef move_num(test_str)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nimport re\r\ndef text_starta_endb(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\nM = 100\r\ndef maxAverageOfPath(cost, N)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nM = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the first digit in factorial of a given number.\nimport math \r\ndef first_Digit(n) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count the most common character in a given string.\nfrom collections import Counter \r\ndef max_char(str1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to count the number of lists in a given number of lists.\ndef count_list(input_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_list(input_list): \r\n    return len(input_list)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\nimport re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the sum of an array.\ndef _sum(arr)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\nimport re\r\ndef text_match(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find length of the string.\ndef string_length(str1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to replace multiple occurence of character by single.\nimport re \r\ndef replace(string, char)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the nth delannoy number.\ndef dealnnoy_num(n, m)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to multiply all items in the list.\ndef multiply_list(items)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to sort the given string.\ndef sort_String(str) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to extract values between quotation marks of the given string by using regex.\nimport re\r\ndef extract_quotation(text1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\nimport re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to shift first element to the end of given list.\ndef move_last(num_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_list(input_list): \r\n    return (len(input_list))**2"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to left rotate the string.\ndef left_rotate(s,d)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\nimport re\r\ndef capital_words_spaces(str1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to locate the right insertion point for a specified value in sorted order.\nimport bisect\r\ndef right_insertion(a, x)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to remove even numbers from a given list.\ndef remove_even(l)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to interchange first and last elements in a given list.\ndef swap_List(newList)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the nth jacobsthal number.\ndef jacobsthal_num(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to calculate the sum of series 1²+2²+3²+….+n².\ndef series_sum(number)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count the elements in a list until an element is a tuple.\ndef count_elim(num)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to calculate the discriminant value.\ndef discriminant_value(x,y,z)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check for even parity of a given number.\ndef check_Even_Parity(x)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to separate and print the numbers and their position of a given string.\nimport re\r\ndef num_position(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to set the right most unset bit.\nimport math \r\ndef get_Pos_Of_Right_most_Set_Bit(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function where a string will start with a specific number.\nimport re\r\ndef match_num(string)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to left rotate the bits of a given number.\nINT_BITS = 32\r\ndef left_Rotate(n,d)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nINT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to remove negative numbers from a list.\ndef remove_negs(num_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove multiple spaces in a string.\nimport re\r\ndef remove_spaces(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to calculate the height of the given binary tree.\nclass Node"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nclass Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to calculate the geometric sum of n-1.\ndef geometric_sum(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the frequency of each element in the given list.\nfrom collections import defaultdict \r\ndef freq_element(test_tup)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count the number of unique lists within a list.\ndef unique_sublists(list1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find n-th rencontres number.\ndef binomial_coeffi(n, k)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check whether the given ip address is valid or not using regex.\nimport re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to count lower case letters in a given string.\ndef lower_ctr(str)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to return true if the given number is even else return false.\ndef even_num(x)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function that matches a string that has an a followed by three 'b'.\nimport re\r\ndef text_match_three(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function that matches a word containing 'z', not at the start or end of the word.\nimport re\r\ndef text_match_wordz_middle(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to calculate the perimeter of a regular polygon.\nfrom math import tan, pi\r\ndef perimeter_polygon(s,l)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if the given integer is a prime number.\ndef prime_num(num)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to count the number of digits in factorial of a given number.\nimport math \r\ndef find_Digits(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to locate the left insertion point for a specified value in sorted order.\nimport bisect\r\ndef left_insertion(a, x)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function that matches a string that has an a followed by zero or one 'b'.\nimport re\r\ndef text_match_zero_one(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove consecutive duplicates of a given list.\nfrom itertools import groupby\r\ndef consecutive_duplicates(nums)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to print duplicants from a list of integers.\ndef Repeat(x)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) "}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to combine two given sorted lists using heapq module.\nfrom heapq import merge\r\ndef combine_lists(num1,num2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to caluclate the area of a tetrahedron.\nimport math\r\ndef area_tetrahedron(side)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to get the difference between two lists.\ndef Diff(li1,li2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = [])"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find sum of odd factors of a number.\nimport math\r\ndef sum_of_odd_Factors(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to remove all characters except letters and numbers using regex\nimport re \r\ndef remove_char(S)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to split the given string at uppercase letters by using regex.\nimport re\r\ndef split_list(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the largest possible value of k such that k modulo x is y.\nimport sys \r\ndef find_max_val(n, x, y)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "}]}
