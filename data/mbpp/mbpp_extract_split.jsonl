{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the most common elements and their counts of a specified text.\nfrom collections import Counter \r\ndef most_common_elem(s,a)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to count number of unique lists within a list.\ndef unique_sublists(list1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\nMAX=1000;\r\ndef replace_spaces(string)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nMAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to print n-times a list using map function.\ndef ntimes_list(nums,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to merge two dictionaries into a single expression.\nimport collections as ct\r\ndef merge_dictionaries(dict1,dict2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to split a string at uppercase letters.\nimport re\r\ndef split_upperstring(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\nimport re\r\ndef text_uppercase_lowercase(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if the string is a valid email address or not using regex.\nimport re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to convert a roman numeral to an integer.\ndef roman_to_int(s)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to calculate the sum of series 1³+2³+3³+….+n³.\nimport math \r\ndef sum_series(number)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to calculate the standard deviation.\nimport math\r\nimport sys\r\ndef sd_calc(data)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the nth nonagonal number.\ndef is_nonagonal(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find even numbers from a mixed list.\ndef Split(list)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nimport re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to check if the given expression is balanced or not.\nfrom collections import deque\r\ndef check_expression(exp)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to sort a list in a dictionary.\ndef sorted_dict(dict1)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to return true if the password is valid.\nimport re\r\ndef pass_validity(p)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find nth polite number.\nimport math \r\ndef is_polite(n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find the occurrences of n most common words in a given text.\nfrom collections import Counter\r\nimport re\r\ndef n_common_words(text,n)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nfrom collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to convert camel case string to snake case string.\ndef camel_to_snake(text)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\nimport re\r\ndef road_rd(street)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\nimport re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to clear the values of the given tuples.\ndef clear_tuple(test_tup)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"}]}
{"messages": [{"role": "user", "content": "Complete the following python function.\n\n\nWrite a function to sum elements in two lists.\ndef sum_list(lst1,lst2)"}, {"role": "assistant", "content": "Here is the completed function:\n\n\n```python\ndef sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"}]}
